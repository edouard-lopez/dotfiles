#!/usr/bin/env fish
# Config for FISH

# disable cowlay with ansible: http://docs.ansible.com/faq.html#how-do-i-disable-cowsay
set -gx ANSIBLE_NOCOWS 1
set -gx BROWSER firefox  # Default web browser
set -gx CDPATH $CDPATH $HOME/projects
set -gx EDITOR vim
set -gx GPG_TTY (tty)
set -gx JAVA_HOME /usr/lib/jvm/java-7-openjdk-amd64
set -gx PATH $HOME/bin/ $HOME/apps/ /usr/local/bin/ ./node_modules/.bin/ $PATH
set -gx IBUS_ENABLE_SYNC_MODE 1  # IBUS+Pycharm bug (see https://youtrack.jetbrains.com/issue/IDEA-78860)
set -gx TERM screen-256color  # support 256 color palette
set -gx VISUAL vim

# Virtualenv
set -x WORKON_HOME "$HOME/.virtualenvs"
set -x PROJECT_HOME "$HOME/projects"
set -g VIRTUALFISH_HOME $WORKON_HOME
set -g VIRTUALFISH_COMPAT_ALIASES "True"
eval (python -m virtualfish compat_aliases auto_activation )

function configure_additional_config
    set files ''  # rc files to load
    for file in $files
        set filerc $HOME/.{$file}rc
        if test -f "$filerc"; or test -h "$filerc"
            source "$filerc"
        end
    end
end

function change-terminal-color-mode
    set arg "$argv[1]"; or set arg "colors=Tomorrow"
    if test -z "$TMUX"; and type konsoleprofile > /dev/null
        konsoleprofile "$arg"
    else
        printf '\033Ptmux;\033\033]50;%s\007\033\\' "$arg"
    end
end

function configure_backup_utilities
    # Backup data to external disk using cron tab (added by 'restore')
    # @param: void
    # @return: stdout
    function rsync2external-disk
        crontab -l | grep 'rsync' | sed 's!@daily !!' | while read -r cmd; bash -c "$cmd"; end
    end
end

function configure_date_utilities
    # Display date H:M (mon-day) for a list of predefined timezone
    # list of timezone available in: /usr/share/zoneinfo/
    #
    # @return string
    function worldtime
        set locations "America/New_York" "Asia/Kolkata" "Europe/Paris"
        for location in locations;
        do
            set time (env TZ=$location date '+%H:%M (%b-%d)')
            printf "%s: %s\n" (echo $location|cut -d '/' -f1) $time
        end
    end

    function today
        to-lower (date '+%Y-%b-%d')
    end
    function today-num
        to-lower (date '+%Y-%m-%d')
    end
    function now
        to-lower (date '+%Y-%b-%d-%H:%M')
    end
end

# Docker
function configure_docker
    function docker-ls
        docker images
        echo ''
        docker ps -a
    end

    function docker-clean
        docker-clean-containers
        docker-clean-images
    end

    function docker-clean-containers
        echo "Deleting stopped containers"
        docker rm (docker ps -a -q)
    end

    function docker-clean-images
        echo "Deleting untagged images"
        docker rmi (docker images -q -f dangling=true)
    end
end


## GIT
function configure_git
    function ga
       git add $argv;
    end
    function gb
       git branch $argv;
    end
    function gc
       git commit $argv;
    end
    function go
       git checkout $argv;
    end
    function gd
       git diff --color-words $argv;
    end
    function gg
       git gui ;
    end
    function gpl
       git pull $argv;
    end
    function gpu
       git push $argv;
    end
    function gs
       git status $argv;
    end
    function gcl
       git clone $argv;
    end
    function gu
       git rm --cached $argv;
    end
    # unstage files to commit
    function grh
       git reset HEAD $argv;
    end
    function push
       git push $argv;
    end
    function push-all
       push all $argv;
    end

    function gar
       git remote -vv $argv;
    end
    function gra
       git-add-remote $argv;
    end
    # Add and attach a remote branch to current one
    # @param    $1|remoteUrl     remote Url adress
    # @param    $2|remoteBranch  remote branch name (default: manu)
    # @return    void
    function git-add-remote
        set project (basename (pwd))
        set remoteUrl $1; or set remoteUrl 'ssh://git@git.edouard-lopez.com:822/root/$project.git'
        set remoteBranch $2; or set remoteBranch 'me'
        set currentBranch (git rev-parse --abbrev-ref HEAD)
        git remote add "$remoteBranch" "$remoteUrl"
        git push -u "$remoteBranch" "$currentBranch"
    end

    # GITHUB
    # Create a repo on github and connect it to local repo
    # @param    $1|$project  project name
    # @param    $2|server  remote server
    # @param    $3|$user  remote user account
    # @return    void
    function git-new
        set -l project $1; or set project "git-$RANDOM"
        set -l server $2; or set server "github.com"
        set -l user $3; or set user "edouard-lopez"

        # create directory if missing
        if test (basename (pwd)) != "$project"
            mkdir "$project"
        end

        # connnect to remote repo
        git remote add origin https://"$server"/"$user"/"$project".git

        # pull README and stuff like that
        git pull origin master
        # push local files
        git push origin master
    end

    # Add existing remote branch to the remote 'all' so you can:
    #  git push all
    # @return    void
    function git-add-to-push-all
        # Fields are: 'name', 'url' and 'method'
        while read -r name url method;
            git config --add remote.all.url "$url"
        end < (git remote -v | awk '!/^all/ && /push/' | psub)
    end

    # Pull and track all remote branches
    function git-pull-all
        for branch in (git branch -a | grep remotes | grep -v HEAD | grep -v master | psub);
            set -l remote_branch (echo $branch | sed -e 's!remotes/origin/!!')
            git branch --track $remote_branch "$branch"
        end
    end

end

function configure_monitoring_utilities
    # List n-application using most space
    # @param    $1|size  number of biggest application to list
    # @return    void
    function du-app
        size="${1:-10}"
        dpkg-query --show --showformat='${Package;-50}\t${Installed-Size}\n' \
        | sort -k 2 -n \
        | grep -v deinstall \
        | awk '{printf "%.1f MB \t %s\n", $2/(1024), $1}' \
        | tail -n "$size"
    end

    # human-readable sizes
    function df
       command df -h $argv;
    end

     # show sizes in MB
    function free
       command free -m;
    end

    function psgrep
        ps aux | grep -i $argv[1] | grep -v grep
    end
end

function configure_network_utilities
    function irc
        if type mosh > /dev/null; then
            mosh --ssh="ssh -p 822" vm-ed -- tmux attach -t irc
        else
            ssh -p 822 vm-ed -- 'tmux attach -t irc || tmux -2 new -s irc'
        end
    end

    function myip
       wget http://checkip.dyndns.org -O - -o /dev/null | cut -d : -f 2 | cut -d \< -f 1 $argv;
    end

    function ping
       command ping -c 10 $argv;
    end
end

# APT / APTITUDE
function configure_package_manager
    # DEBIAN/UBUNTU/LINUX MINT
    function pkg-search
       aptitude search $argv;
    end
    function pkg-install
       sudo apt-get install $argv;
    end
    function pkg-remove
       sudo apt-get remove $argv;
    end
    function pkg-clean
       sudo apt-get clean;
    end
    function pkg-autoclean
       sudo apt-get autoclean;
    end
    function pkg-update
       sudo apt-get update $argv;
    end
    function pkg-upgrade
       sudo apt-get upgrade $argv;
    end
    function pkg-upgrade-all
       sudo apt-get dist-upgrade $argv;
    end
    function pkg-show
       aptitude show $argv;
    end
    function pkg-sync
       sudo apt-get update; and sudo apt-get upgrade -y;
    end
    function pkg-sync-all
       sudo apt-get update; and sudo apt-get dist-upgrade;
    end
    function pkg-autoremove
       sudo apt-get autoremove;
    end
    function pkg-clean-all
       sudo apt-get clean; sudo apt-get autoclean; sudo apt-get autoremove;
    end
end

# PAGER / LESS
function configure_pager
    # Colored man pages: http://linuxtidbits.wordpress.com/2009/03/23/less-colors-for-man-pages/
    # Less Colors for Man Pages
    set -gx LESS_TERMCAP_mb \e'[01;31m'       # begin blinking
    set -gx LESS_TERMCAP_md \e'[01;38;5;74m'  # begin bold
    set -gx LESS_TERMCAP_me \e'[0m'           # end mode
    set -gx LESS_TERMCAP_se \e'[0m'           # end standout-mode
    set -gx LESS_TERMCAP_so \e'[38;5;016m'\e'[48;5;220m'    # begin standout-mode - info box
    set -gx LESS_TERMCAP_ue \e'[0m'           # end underline
    set -gx LESS_TERMCAP_us \e'[04;38;5;146m' # begin underline
end


# OCTOPRESS BLOG
function configure_octopress
    set -gx OCTOPRESS_THEME 'carillon'
    function octopressTagList
        set working_directory "$HOME/blog/source/_posts/"
        awk -F ':' '/^tags/ || /^categories/{print $2}' "$working_directory"/* | tr -d '[] ' | tr -s ',' '\n' | sort -u
    end
end

function configure_server_utilities
    # SSH alias
    function ssh
           if type mosh > /dev/null; then
                   mosh $argv
           else
                   ssh $argv
           end
    end
end

function configure_shell
    # so we can distinguish between Yakuake and Konsole (no tmux)
    function konsole
        TERMINAL_CONTEXT='konsole' command konsole
    end
end

function configure_string_utilities
    # Change case from lower case to upper case
    # @param     $@  String to upper
    # @return    string
    function to-upper
       echo $argv |tr '[:lower:]' '[:upper:]';
    end
    function l2u
       to-upper $argv;
    end

    # Change case from upper case to lower case
    # @param     $@  String to lower
    # @return    string
    function to-lower
       echo $argv |tr '[:upper:]' '[:lower:]' ;
    end
    function u2l
       to-lower $argv;
    end

    # Capitalize a string
    # @param    $@  string to capitalize
    # @return   String
    function capitalize
        set input "$argv"
        echo "$input" | tr '[A-Z]' '[a-z]' | sed 's/\(^\| \)\([a-z]\)/\1\u\2/g'
    end

    function replaceText
        set text "$argv[1]"
        set sep "$argv[2]"; or set sep " " # space
        set newsep "$argv[2]"; or set newsep "-" # dash

        echo "$text" | sed -e "s/$sep/$newsep/g"
    end

    function dashify
        replaceText "$argv[1]" ' ' '-'
    end

    # Description: prepend text to a file
    # param, $1 : text to prepend
    # param, $2 : file to edit
    function prependText
        printf '%s\n' H 1i "$argv[1]" . w | ed -s "$argv[2]"
    end

    # Compare a file computed md5sum against official checksum
    # @param    $1|file  file to checksum
    # @param    $2|controlChecksum  official/valid checksum
    # @return    void
    function md5check
        set controlChecksum "$argv[2]"

        if test ! -e "$argv[1]"; or test -z "$argv[2]"
            if test ! -e "$argv[1]"; and printf "[!] File not found\n"; end
            if test -z "$argv[2]"; and printf "[!] Checksum is empty\n"; end
            printf "Aborting…\n"
            exit
        end

        set fileChecksum (md5sum "$argv[1]" | cut -d ' ' -f 1 )
        if test "$fileChecksum" = "$controlChecksum"
            printf "[i] File is valid.\n"
        else
            printf "[!] Checksum does NOT match!\n"
        end
    end
end

# ALIASES / FUNCITONS
function configure_utilities
    function up
       cd .. $argv;
    end
    function back
       cd - $argv;
    end

    # Konsole color changing
    function day-mode
       change-terminal-color-mode "colors=Tomorrow";
    end
    function night-mode
       change-terminal-color-mode "colors=TomorrowNightBright";
    end

    function decrypt
       gpg --decrypt $argv;
    end

    # Open given file with adequate rights (sudo/user)
    # @param    $@|$file  file(s) name
    # @return    void
    function e
        set file "$argv[1]"

        if test -w "$file"
            eval $EDITOR -- "$file"
        else if test ! -a "$file"
            touch "$file"
            eval $EDITOR -- "$file"
        else
            sudo -e -- "$file"
        end
    end

    # ex - archive extractor
    # usage: ex <file>
    function ex
        if test -f "$argv[1]"
            switch $1
                case *.tar.bz2;     tar xjf "$argv[1]";
                case *.tar.gz;      tar xzf "$argv[1]";
                case *.bz2;         bunzip2 "$argv[1]";
                case *.rar;         unrar x "$argv[1]";
                case *.gz;          gunzip "$argv[1]";
                case *.tar;         tar xf "$argv[1]";
                case *.tbz2;        tar xjf "$argv[1]";
                case *.tgz;         tar xzf "$argv[1]";
                case *.zip;         unzip "$argv[1]";
                case *.Z;           uncompress "$argv[1]";
                case *.7z;          7z x "$argv[1]";
                case *.tar.xz;      tar xJf "$argv[1]";
                case *;             echo "'$1' cannot be extracted via ex()";
            end
        else
            echo "'$1' is not a valid file"
        end
    end

    # Return HTTP status code matching pattern
    # @return   string
    function htc
        env GREP_COLORS="sl=01;34:ms=01;32" grep -i "$argv" "$HOME"/.http-cheatsheet.md
    end

    # image viewer
    function i
       feh $argv;
    end

    # Filter given pass by given string
    # @param    $1|path  path to list
    # @param    $2|filter  string used to filter directory listing
    # @return    string
    function ls-grep
        set dir "$argv[1]"
        set filter "$argv[2]"
        ls -lah "$dir/$filter"
    end

    # A quicker Mkdir
    # @param    $1|directory  directory create and switch to
    # @return    void
    # @author:   Shrayas Rajagopal
    # @see: https://coderwall.com/p/p1sd5a
    function md
       mkdir "$argv[1]"; and cd "$argv[1]";
    end

    function pdf2djvu-ocr
       $HOME/projects/pdf2djvu-ocr/pdf2djvu-ocr.sh $argv;
    end

    # Use the google API to translate text
    # @param    $1|$text               text to translate
    # @param    $2|$sourceLang   text to translate
    # @param    $3|$targetLang    text to translate
    # @reutrn    string
    function translate
        set text "$argv[1]"
        set sourceLang "$2"; or set sourceLang "en"
        set targetLang "$3"; or set targetLang "fr-FR"
        set apiQueryString (printf "client=t&text=%s&hl=en&sl=%s&tl=%s&ie=UTF-8&oe=UTF-8&multires=1&prev=btn&ssel=0&tsel=0&sc=1" "$text" "$sourceLang" "$targetLang")
        set url "http://translate.google.com/translate_a/t?$apiQueryString"
        set raw (curl -A "Mozilla\/5.0" \'"$url"\')

        echo "$raw"
    end

    function tree
       command tree --charset utf-8 $argv;
    end

    # We just want to view content with pager (default: less)
    function v
       $PAGER $argv;
    end
end


function configure_shell
    if  test  -n $FISH_VERSION
        function refresh
            source "$HOME"/.config/fish/config.fish
        end
    end

    # so we can distinguish between Yakuake and Konsole (no tmux)
    function konsole
        env TERMINAL_CONTEXT='konsole' command konsole
    end

end


function start_tmux
    # https://wiki.archlinux.org/index.php/Tmux#Start_tmux_on_every_shell_login
    if type tmux > /dev/null
        #if not inside a tmux session, and if no session is started, start a new session
        if test -z "$TMUX" ; and test -z $TERMINAL_CONTEXT
            tmux -2 attach; or tmux -2 new-session
        end
    end
end

start_tmux
configure_backup_utilities
configure_date_utilities
configure_docker
configure_git
configure_monitoring_utilities
configure_network_utilities
configure_package_manager
configure_pager
#configure_python
configure_octopress
configure_server_utilities
configure_shell
configure_string_utilities
configure_utilities
configure_additional_config

#EOF