#!/usr/bin/env bash

stylerc="$HOME/stylerc"
if [[ -f "$stylerc" || -h "$stylerc" ]]; then
	. "$stylerc" # get some style
fi

if [[ $SHELL = *bash ]]; then
    shopt -s dotglob
    shopt -s dirspell
fi

export PATH=$PATH:$HOME/apps/:/usr/local/bin/
export STYLERC="$HOME/projects/stylerc/stylerc"


# ZSH
# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
#plugins=(command-not-found composer cp debian gpg-agent git git-extras gitfast github heroku npm sprunge ssh-agent yo )

zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*' group-name
#zstyle ':omz:module:history-substring-search' case-sensitive 'yes'

# JAVA
JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
export JAVA_HOME

# ZSH aliases
alias -g gpi="| grep -i "

# @description Filter given pass by given string
# @param    $1|path  path to list
# @param    $2|filter  string used to filter directory listing
# @return    string
function lg() {
  dir="$1"
  filter="$2"
  if [[ -n "$filter" ]]; then
    ls -lah "$dir" | grep -i "$filter"
  else
    ls -lah | grep -i "$filter"
  fi
}

# SSH
#alias ssh-manu='gnome-terminal --window-with-profile=gentoo -x bash -c "ssh Gentoo"; exit'
# GIT
alias gg="git gui &"
alias gpl="git pull"
alias gps="git push"
alias gs="git status "
alias go="git checkout "
alias gc="git commit "
alias gcl="git clone "
alias gu="git rm --cached "
# unstage files to commit
alias guc="git reset HEAD "


# GITHUB
# @description create a repo on github and connect it to local repo
# @param    $1|$project  project name
# @param    $2|server  remote server
# @param    $3|$user  remote user account
# @return    void
function git-new() {
    local project="${1:-git-$RANDOM}"
    local server="${2:-github.com}"
    local user="${3:-edouard-lopez}"

    # create directory if missing
    [[ "$(basename "$(pwd)")" != "$project" ]] && mkdir "$project"

    # connnect to remote repo
    git remote add origin https://"$server"/"$user"/"$project".git

    # pull README and stuff like that
    git pull origin master
    # push local files
    git push origin master
}


alias refresh=". $HOME/.zshrc"

alias irc="irssi "
alias pdf2djvu-ocr=$HOME/projects/pdf2djvu-ocr/pdf2djvu-ocr.sh
alias myip="wget http://checkip.dyndns.org -O - -o /dev/null | cut -d : -f 2 | cut -d \< -f 1"


# DEBIAN/UBUNTU/LINUX MINT
alias pkg-search="aptitude search "
#alias pkg-install="sudo apt-get install "
alias pkg-remove="sudo apt-get remove "
alias pkg-clean="sudo apt-get clean"
alias pkg-autoclean="sudo apt-get autoclean"
alias pkg-update="sudo apt-get update "
alias pkg-upgrade="sudo apt-get upgrade "
alias pkg-sync="sudo apt-get update && sudo apt-get upgrade -y"
alias pkg-autoremove="sudo apt-get autoremove "
alias pkg-clean-all="sudo apt-get clean; sudo apt-get autoclean; sudo apt-get autoremove "
# @description  try to install package if fail, search for it
# @param         $@  list of packages
# @return          integer
function pkg-install() {
    if ! sudo apt-get install "$@"  ; then
        printf "Install %s...\nSearching for package(s): %s\n" "$(_error "failed")" "$(_value "$*")"

        for p in "$@"; do
            resultCount="$(pkg-search "$p" | wc -l)"
            if (( $resultCount == 0 )); then
                printf "\t%s: %s\n" "$(_value "$p")" "$(_warning "not found")"
            fi
        done
    fi
}

# @description return the size in KiloByte for given files
# @param    $@|$files  files list
# @return    integer
function getSizeInKilo() {
    files="$@"
    echo "$(( $(stat -c "%s" "$files")/1024 ))"
}


# @description  use the google API to translate text
# @param    $1|$text               text to translate
# @param    $2|$sourceLang   text to translate
# @param    $3|$targetLang    text to translate
# @reutrn    string
function translate() {
    text="$1"
    sourceLang="${2:-en}"
    targetLang="${3:-fr-FR}"
    apiQueryString="$(printf "client=t&text=%s&hl=en&sl=%s&tl=%s&ie=UTF-8&oe=UTF-8&multires=1&prev=btn&ssel=0&tsel=0&sc=1" "$text" "$sourceLang" "$targetLang")"
    url="'http://translate.google.com/translate_a/t?$apiQueryString'"
    raw="$(curl -A "Mozilla/5.0" $url)"

    echo $raw
}

nrc="$HOME/.nrc"
if [[ -f "$nrc" || -h "$nrc" ]]; then
        . "$nrc" # o2n
fi

#EOF
