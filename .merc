#!/usr/bin/env bash

# support 256 color palette
export TERM=screen-256color

# https://wiki.archlinux.org/index.php/Tmux#Start_tmux_on_every_shell_login
if which tmux 2>&1 >/dev/null; then
    #if not inside a tmux session, and if no session is started, start a new session
    test -z "$TMUX" && (tmux -2 attach || tmux -2 new-session)
fi

stylerc="$HOME/stylerc"
if [[ -f "$stylerc" || -h "$stylerc" ]]; then
	. "$stylerc" # get some style
fi

if [[ $BASH = *bash ]]; then
    shopt -s dotglob
    shopt -s dirspell
    alias refresh=". $HOME/.bashrc"
elif [[ $ZSH_NAME = zsh ]]; then
    alias refresh=". $HOME/.zshrc"
else
    echo -n "" # shell
fi

export PATH=$HOME/bin/:$HOME/apps/:/usr/local/bin/:$PATH
export STYLERC="$HOME/projects/stylerc/stylerc"

###########################################################################
#                          PYTHON / DJANGO                                #
###########################################################################
export WORKON_HOME=$HOME/.virtualenvs
venvBin=/usr/local/bin/virtualenvwrapper.sh
[[ -e "$venvBin" ]] && source "$venvBin"

###########################################################################
#                         CONTEXT/APP UTILITIES                           #
###########################################################################

export OCTOPRESS_THEME='carillon'
octopressTagList() {
  WD="$HOME/blog/source/_posts/"
  awk -F ':' '/^tags/ || /^categories/{print $2}' "$WD"/* | tr -d '[] ' | tr -s ',' '\n' | sort -u
}
alias tagList=octopressTagList

###########################################################################
#                          UTILITAIRES SYSTEMES                           #
###########################################################################
# 'jump' to place 'mark'ed (require ohmyzsh 'jump' plugin)
alias j="jump "
alias @="j "
alias â†’="j "
alias m="mark "
alias tree="tree --charset utf-8 "

# Colored man pages: http://linuxtidbits.wordpress.com/2009/03/23/less-colors-for-man-pages/
# Less Colors for Man Pages
export LESS_TERMCAP_mb=$'\E[01;31m'       # begin blinking
export LESS_TERMCAP_md=$'\E[01;38;5;74m'  # begin bold
export LESS_TERMCAP_me=$'\E[0m'           # end mode
export LESS_TERMCAP_se=$'\E[0m'           # end standout-mode
export LESS_TERMCAP_so=$'\E[38;5;016m\E[48;5;220m'    # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'           # end underline
export LESS_TERMCAP_us=$'\E[04;38;5;146m' # begin underline

# @description Send a notification to desktop
# @param    $1|msg   notification message
# @param    $2|ttl   time to live
# @param    $3|icon  notification icon
# @return    void
function alert() {
  msg="$1"
  ttl=${2:-$((${#msg}*40))} # duration depends on message length (40ms/char)
  icon="${3:-/usr/share/icons/gnome/32x32/apps/gnome-terminal.png}"

  notify-send -i "$icon" -t "$ttl" "$msg"
}

export EDITOR=vim
export VISUAL=vim
export BROWSER='$HOME/bin/firefox' # Default web browser

# @description Open given file with adequate rights (sudo/user)
# @param    $@|$f  file(s) name
# @return    void
function e() {
  f="$1"

  if [[ -w "$f" ]]; then
    "$EDITOR" -- "$f"
  else
    sudo -e -- "$f"
  fi
}

unalias md
# @description  A quicker Mkdir
# @param    $1|directory  directory create and switch to
# @return    void
# @author:   Shrayas Rajagopal
# @see: https://coderwall.com/p/p1sd5a
function md() {
  mkdir $1 && cd $1
}


alias sudo='sudo '
alias df='df -h'            # human-readable sizes
alias free='free -m'                      # show sizes in MB

alias decrypt="gpg --decrypt "
GPG_TTY=`tty`
export GPG_TTY


psgrep() {
  ps aux | { \
    read -r; # reads the first line of input \
    printf '%s\n' "$REPLY"; # print the first line of input (=the header) \
    grep "$@"; # then grep gets to grep the remaining lines. \
  }
}

# Konsole color changing
switchToNight() {
  # switch-term-color "colors=TomorrowNightBlue"
}
switchToLight() {
  switch-term-color "colors=Tomorrow"
}
switch-term-color() {
  arg="${1:-colors=Tomorrow}"
  if [[ -z "$TMUX" ]]; then
    konsoleprofile "$arg"
  else
    printf '\033Ptmux;\033\033]50;%s\007\033\\' "$arg"
  fi
}


###########################################################################
#                                  XML                                    #
###########################################################################
formatXML() {
  export XMLLINT_INDENT=" "
  if [[ -e "$1" ]]
  then
    xmllint --format "$1" --output "$1" --nsclean --nonet # --encode UTF-8
    printf "Conversion de %s\n" $1
  else
    printf "[!] File Not found: %s.\n Aborting..." "$1"
  fi
}
alias xmlFormat=formatXML
alias testXSLT1="echo 'xalan -in ./input.xml -xsl ./stylesheet.xsl -out ./output.xyz' "
alias testXSLT2="echo 'java -jar ~/apps/saxon/saxon.jar ./input.xml ./stylesheet.xsl' "


# Yeoman: Yo/Bower/Grunt
#eval "$(grunt --completion=bash)"

# allow #version syntax
alias bower='noglob bower'

# JAVA
JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
export JAVA_HOME

# @description Filter given pass by given string
# @param    $1|path  path to list
# @param    $2|filter  string used to filter directory listing
# @return    string
function lg() {
  dir="$1"
  filter="$2"
  if [[ -n "$filter" ]]; then
    ls -lah "$dir" | grep -i "$filter"
  else
    ls -lah | grep -i "$filter"
  fi
}

# SSH
#alias ssh-manu='gnome-terminal --window-with-profile=gentoo -x bash -c "ssh Gentoo"; exit'
# GIT
alias ga='git add '
alias gb='git branch '
alias gc='git commit'
alias go='git checkout '
alias gd='git diff'
alias gg="git gui &"
alias gpl="git pull"
alias gps="git push"
alias gs="git status "
alias gcl="git clone "
alias gu="git rm --cached "
# unstage files to commit
alias guc="git reset HEAD "
alias push="git push "
alias push-all="push all"

alias gar="git remote -vv"
alias gra="git-add-remote "
# @description Add and attach a remote branch to current one
# @param    $1|remoteUrl     remote Url adress
# @param    $2|remoteBranch  remote branch name (default: manu)
# @return    void
function git-add-remote() {
  project="$(basename $(pwd))"
  remoteUrl="${1:-ssh://git@git.edouard-lopez.com:822/root/$project.git}"
  remoteBranch="${2:-manu}"
  currentBranch="$(git rev-parse --abbrev-ref HEAD)"
  git remote add "$remoteBranch" "$remoteUrl"
  git push -u "$remoteBranch" "$currentBranch"
}

# GITHUB
# @description create a repo on github and connect it to local repo
# @param    $1|$project  project name
# @param    $2|server  remote server
# @param    $3|$user  remote user account
# @return    void
function git-new() {
    local project="${1:-git-$RANDOM}"
    local server="${2:-github.com}"
    local user="${3:-edouard-lopez}"

    # create directory if missing
    [[ "$(basename "$(pwd)")" != "$project" ]] && mkdir "$project"

    # connnect to remote repo
    git remote add origin https://"$server"/"$user"/"$project".git

    # pull README and stuff like that
    git pull origin master
    # push local files
    git push origin master
}


alias pdf2djvu-ocr=$HOME/projects/pdf2djvu-ocr/pdf2djvu-ocr.sh
alias myip="wget http://checkip.dyndns.org -O - -o /dev/null | cut -d : -f 2 | cut -d \< -f 1"


# DEBIAN/UBUNTU/LINUX MINT
alias pkg-search="aptitude search "
#alias pkg-install="sudo apt-get install "
alias pkg-remove="sudo apt-get remove "
alias pkg-clean="sudo apt-get clean"
alias pkg-autoclean="sudo apt-get autoclean"
alias pkg-update="sudo apt-get update "
alias pkg-upgrade="sudo apt-get upgrade "
alias pkg-upgrade-all="sudo apt-get dist-upgrade "
alias pkg-show="aptitude show "
alias pkg-sync="sudo apt-get update && sudo apt-get upgrade -y"
alias pkg-sync-all="sudo apt-get update && sudo apt-get dist-upgrade "
alias pkg-autoremove="sudo apt-get autoremove "
alias pkg-clean-all="sudo apt-get clean; sudo apt-get autoclean; sudo apt-get autoremove "
# @description  try to install package if fail, search for it
# @param         $@  list of packages
# @return          integer
function pkg-install() {
    if ! sudo apt-get install "$@"  ; then
        printf "Install %s...\nSearching for package(s): %s\n" "$(_error "failed")" "$(_value "$*")"

        for p in "$@"; do
            resultCount="$(pkg-search "$p" | wc -l)"
            if (( $resultCount == 0 )); then
                printf "\t%s: %s\n" "$(_value "$p")" "$(_warning "not found")"
            fi
        done
    fi
}

# @description return the size in KiloByte for given files
# @param    $@|$files  files list
# @return    integer
function getSizeInKilo() {
    files="$@"
    echo "$(( $(stat -c "%s" "$files")/1024 ))"
}


# @description  use the google API to translate text
# @param    $1|$text               text to translate
# @param    $2|$sourceLang   text to translate
# @param    $3|$targetLang    text to translate
# @reutrn    string
function translate() {
    text="$1"
    sourceLang="${2:-en}"
    targetLang="${3:-fr-FR}"
    apiQueryString="$(printf "client=t&text=%s&hl=en&sl=%s&tl=%s&ie=UTF-8&oe=UTF-8&multires=1&prev=btn&ssel=0&tsel=0&sc=1" "$text" "$sourceLang" "$targetLang")"
    url="'http://translate.google.com/translate_a/t?$apiQueryString'"
    raw="$(curl -A "Mozilla/5.0" $url)"

    echo $raw
}


# @description list n-application using most space
# @param    $1|size  number of biggest application to list
# @return    void
function appDiskUsage() {
    size="${1:-10}"
    dpkg-query --show --showformat='${Package;-50}\t${Installed-Size}\n' \
        | sort -k 2 -n \
        | grep -v deinstall \
        | awk '{printf "%.1f MB \t %s\n", $2/(1024), $1}' \
        | tail -n $size
}

nrc="$HOME/.nrc"
if [[ -f "$nrc" || -h "$nrc" ]]; then
        . "$nrc" # o2n
fi

# Serveur deployment
#alias sync-weechat@manu='scp -r -P 822 "$HOME"/.weechat ed8@vm-ed:/home/ed8/'i
alias irc="ssh ed8@vm-ed -p 822 -t 'tmux attach -t irc'"
alias ssh:vm@vm-u-srv="ssh vm@vm-ubuntu"
alias ssh:ed8@vm-manu="ssh ed8@vm-ed -p 822 "
alias ssh:ed@manu="ssh ed@manu"


#functoin irc() {
#	host="vm-ed"
#	port=822
#	ssh ed8@"$host" -p "$port" -t 'screen -r irc'
#}
#EOF

# start a VM on manu's server
qemu-ed() {
  # variables
  myVM="/mnt/data/ISO/vm-ubuntu-12.04.2-server-amd64"
  myISO="/mnt/data/ISO/ubuntu-12.04.2-server-amd64.iso"
  # lancement, use
  # Bash: use nohup <cmd>
  # Bash: <cmd> &
  # Bash/Zsh (global): setopt nohup
  # Zsh: <cmd> &!
  # nohup qemu-kvm -cpu SandyBridge -hda "$myVM" -m 1G -vnc :1 -usbdevice tablet -net nic,model=e1000 -net tap,ifname=qtap1,script=no  -cdrom "$myISO" -boot order=d &!
  qemu-kvm -cpu SandyBridge -hda "$myVM" -m 1G -vnc :1 -usbdevice tablet -net nic,model=e1000 -net tap,ifname=qtap1,script=no  -cdrom "$myISO" -boot order=d &!
}


# @description Display commit convention used by angularJS
# @return    string
function ccv() {
	printf "Commit convention:
	- feat (feature)
	- fix (bug fix)
	- docs (documentation)
	- style (formatting, missing semi colons, ...)
	- refactor
	- test (when adding missing tests)
	- chore (git,ignore,maintain,submodule)\n"
}


# @description Add existing remote branch to the remote 'all' so you can:
#               git push all
# @return    void
function git-add-push-all() {
    while read -r name url method; do
      git config --add remote.all.url "$url"
    done < <(git remote -v | awk '!/^all/ && /push/')
}


# ex - archive extractor
# usage: ex <file>
ex ()
{
  if [[ -f "$1" ]] ; then
    case $1 in
      *.tar.bz2)   tar xjf "$1"   ;;
      *.tar.gz)    tar xzf "$1"   ;;
      *.bz2)       bunzip2 "$1"   ;;
      *.rar)       unrar x "$1"     ;;
      *.gz)        gunzip "$1"    ;;
      *.tar)       tar xf "$1"    ;;
      *.tbz2)      tar xjf "$1"   ;;
      *.tgz)       tar xzf "$1"   ;;
      *.zip)       unzip "$1"     ;;
      *.Z)         uncompress "$1";;
      *.7z)        7z x "$1"      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}


###########################################################################
#                          UTILITAIRES FICHIERS                           #
###########################################################################
alias up='cd ..'
alias back='cd -'

# @description Change case from lower case to upper case
# @param     $@  String to upper
# @return    string
l2u() {
  echo "$@" |tr '[:lower:]' '[:upper:]';
}

# @description Change case from upper case to lower case
# @param     $@  String to lower
# @return    string
u2l() {
  echo "$@" |tr '[:upper:]' '[:lower:]' ;
}

# @description Capitalize a string
# @param    $@  string to capitalize
# @return   String
capitalize() {
  input=$(u2l "$@"); for i in "$input"; do cap=$(echo -n "${i:0:1}" | tr "[:lower:]" "[:upper:]"); echo -n "${cap}${i:1} "; done; printf "\n";
}
alias cap="capitalize "


replaceText() {
  text="$1"
  sep="${2:- }" # space
  newsep="${3:--}"
  [[ -z "$text" ]] && exit
  echo "${text//$sep/$newsep}"
}

dashify() {
  replaceText "$1" ' ' '-'
}

# @description: prepend text to a file
# param, $1 : text to prepend
# param, $2 : file to edit
prependText() {
  # how to use with grep :
  # grep -LZ charset ~/pleade-*/**/theme/css/**/*.css | while IFS= read -rd '' file; do printf "%s\n" "$file"; prependText '@charset "UTF-8";' "$file"; done
  printf '%s\n' H 1i "$1" . w | ed -s "$2"
}

# @description Compare a file computed md5sum against official checksum
# @param    $1|file  file to checksum
# @param    $2|controlChecksum  official/valid checksum
# @return    void
function md5check() {
  controlChecksum="$2"

  if [[ ! -e "$1" || -z "$2" ]];
  then
    [[ ! -e "$1" ]] && printf "[!] File not found\n"
    [[ -z "$2" ]] && printf "[!] Checksum is empty\n"
    printf "Abortingâ€¦\n"
    exit
  fi

  fileChecksum="$(md5sum "$1" | cut -d ' ' -f 1 )"

  if [[ "$fileChecksum" = "$controlChecksum" ]];
  then
    printf "[i] File is valid.\n"
  else
    printf "[!] Checksum does NOT match!\n"
  fi
}


###########################################################################
#                                  DATE                                   #
###########################################################################

# Display date H:M (mon-day) for a list of predefined timezone
# list of timezone available in: /usr/share/zoneinfo/
#
# @return string
worldtime() {
  places=( "America/New_York" "Asia/Kolkata" "Europe/Paris" )
  for tz in ${places[@]};
  do
    time=$(TZ="$tz" date '+%H:%M (%b-%d)')
    printf "%s: %s\n" "${tz##*/}" $time
  done
}

today() {
  echo "$(u2l "$(date '+%Y-%b-%d')")"
}
today-num() {
  echo "$(u2l "$(date '+%Y-%m-%d')")"
}
now() {
  echo "$(u2l "$(date '+%Y-%b-%d-%H:%M')")"
}


# Development Firefox
alias cfx="cfx -p $HOME/.mozilla/firefox/esie98ly.dev/ "


# if [[ ! $TERM =~ screen ]]; then
#   tmux new-session -d 'irc'

# # Create a bunch of windows in /var/log
# cd /var/log
# for i in {1..4}; do
#     tmux new-window -t "$USER:$i" -n "tab:$i"
# done
# fi

# eof
